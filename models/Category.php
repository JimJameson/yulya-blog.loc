<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "category".
 *
 * @property int $id
 * @property string $title
 * @property string|null $img
 * @property int $parent_id
 * @property string|null $description
 * @property string|null $keywords
 * @property string|null $color
 * @property int $isGroup
 * @property string $short_title
 *
 * @property Post[] $posts
 */
class Category extends \yii\db\ActiveRecord
{

    public $depth;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'category';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'short_title', 'parent_id'], 'required'],
            [['parent_id'], 'integer'],
            [['title', 'img', 'description', 'keywords', 'color'], 'string', 'max' => 255],
            ['isGroup', 'boolean'],

        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Название',
            'img' => 'Картинка',
            'parent_id' => 'Родитель',
            'description' => 'Описание',
            'keywords' => 'Ключевые слова',
            'color' => 'Цвет',
            'isGroup' => 'Это группа категорий',
            'short_title' => 'Короткое название',
        ];
    }

    /**
     * Gets query for [[Posts]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPosts()
    {
        return $this->hasMany(Post::class, ['category_id' => 'id']);
    }

    public static function buildTree()
    {
        $categories = Category::find()->select(['title as label', 'id', 'parent_id'])->indexBy('id')->asArray()->all();

        foreach ($categories as &$category) {

            $category['url'] = '@web/category/' . $category['id'];
        }

        $tree = [];
        foreach ($categories as $id=>&$node) {
            if (!$node['parent_id']) {
                $tree[$id] = &$node;
            } else {
                $categories[$node['parent_id']]['items'][$node['id']] = &$node;
            }
        }
        return $tree;

    }

    public static function getTree()
    {
        //get cache
        return Yii::$app->cache->getOrSet('category_menu', function () {
            return self::buildTree();
        });
    }

    public static function searchInTree($categories, $id)
    {
        $res = [];
        foreach ($categories as $category) {
            if($category['id'] == $id) {
                $res =  $category;
                break;
            }
            if(isset($category['items'])) {
                $res = self::searchInTree($category['items'], $id);
            }
        }
        return $res;
    }


    public static function getChildrenRecoursive(array $arr, array &$children = [])
    {
        if(isset($arr['items'])) {
            foreach ($arr['items'] as $item) {
                array_push($children, $item);
                self::getChildrenRecoursive($item, $children);
            }
        }
        return $children;
    }

    public static function getCategoryChildren($id)
    {
        $categories = self::getTree();
        $category = self::searchInTree($categories, $id);

        $children = Category::getChildrenRecoursive($category);
        $categories_id = [$id];

        foreach ($children as $child) {
            array_push($categories_id, $child['id']);
        }

        return $categories_id;
    }

    public function getParent()
    {
        return $this->hasOne(Category::class, ['id' => 'parent_id']);
    }

    public function getChildren()
    {
        return $this->hasMany(Category::class, ['parent_id' => 'id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        Yii::$app->cache->set('category_menu', self::buildTree());

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
