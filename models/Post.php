<?php

namespace app\models;

use Imagine\Image\Box;
use Imagine\Image\Point;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\FileHelper;
use yii\helpers\Json;
use yii\helpers\StringHelper;
use yii\imagine\Image;
use yii\web\UploadedFile;



/**
 * This is the model class for table "post".
 *
 * @property int $id
 * @property int $category_id
 * @property string $title
 * @property string $content
 * @property string|null $img
 * @property string|null $keywords
 * @property string|null $description
 * @property string $created_at
 * @property string $updated_at
 * @property int $views
 * @property int $likes
 * @property string $short_content
 * @property int $is_published
 *
 * @property Comment[] $comments
 * @property Comment[] $postComments
 * @property PostLike[] $postLikes
 * @property PostTag[] $tags
 * @property Category $category
 * @property string $date

 */
class Post extends \yii\db\ActiveRecord
{

    public $file;
    public $crop_info;
    public $mailing = false;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'post';
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                ],
                'value' => new Expression('NOW()'),
            ]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['category_id', 'title', 'content', 'short_content'], 'required'],
            [['category_id', 'views', 'likes', 'is_published'], 'integer'],
            [['views', 'likes', 'is_published'], 'default', 'value' => 0],
            [['content', 'short_content'], 'string'],
            [['created_at', 'updated_at'], 'safe'],
//            ['file', 'image',  'extensions' => ['jpg', 'jpeg', 'png', 'gif'],
//                    'mimeTypes' => ['image/jpeg', 'image/pjpeg', 'image/png', 'image/gif'],],
            ['file', 'safe'],
            ['img', 'default', 'value' => 'post_img/not-found.png'],
            [['title', 'img', 'keywords', 'description'], 'string', 'max' => 255],
            ['mailing', 'boolean'],
            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => Category::class, 'targetAttribute' => ['category_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'category_id' => 'Категория',
            'title' => 'Название',
            'content' => 'Содержание',
            'img' => 'Картинка',
            'file' => 'Картинка',
            'keywords' => 'Ключевые слова',
            'description' => 'Описание',
            'created_at' => 'Дата создания',
            'updated_at' => 'Дата обновления',
            'views' => 'Просмотров',
            'likes' => 'Лайков',
            'short_content' => 'Краткое содержание',
            'is_published' => 'Опубликовать пост',
            'mailing' => 'Выполнить рассылку данной статьи при публикации',

        ];
    }

    /**
     * Gets query for [[Comments]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getComments()
    {
        return $this->hasMany(Comment::class, ['post_id' => 'id']);
    }

    /**
     * Gets query for [[Category]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::class, ['id' => 'category_id']);
    }

    public static function getCategoryPostsQuery($categories_id)
    {
        return self::find()->where(['category_id' => $categories_id])
            ->andWhere(['is_published' => 1])
            ->joinWith('category')->orderBy('updated_at DESC');
    }

    public function getPostComments()
    {
        return $this->hasMany(Comment::class, ['post_id' => 'id'])->where(['status' => 1]);
    }

    public function getPostLikes()
    {
        return $this->hasMany(PostLike::class, ['post_id' => 'id']);
    }

    public function beforeSave($insert)
    {
        if ($this->mailing) {
            $this->updated_at = date("Y-m-d H:i:s");
        }

        $this->cropImage();

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $this->saveKeywords($insert, $changedAttributes);
        if ($this->mailing) {
            $this->sendEmails();
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    protected function saveImage()
    {
        if ($file = UploadedFile::getInstance($this, 'file')) {
            $file_name = uniqid() . '_' . $file->baseName . '.' . $file->extension;
            $this->img = 'post_img/' . $file_name;
            $file->saveAs($this->img);
        }
    }

    protected function cropImage()
    {
        if (is_string($this->file) && strstr($this->file, 'data:image')) {

            // creating image file as png
            $data = $this->file;
            $data = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $data));
            $fileName = 'post_img/' . time() . '-' . rand(100000, 999999) . '.png';
            file_put_contents(Yii::getAlias('@app/web/')  . $fileName, $data);


            // deleting old image
            // $this->image is real attribute for filename in table
            // customize your code for your attribute
            if (!$this->isNewRecord && !empty($this->img)) {
                unlink(Yii::getAlias('@app/web' . '/' . $this->img));
            }

            // set new filename
            $this->img = $fileName;
        }
    }

    protected function saveKeywords($insert, $changedAttributes)
    {
        $keywords = Yii::$app->request->post('Post')['tags'];
        if (isset($keywords)) {
            $transaction = Yii::$app->db->beginTransaction();

            try {
//                $keywords = StringHelper::explode($this->keywords, ',', ' ', true);
//                $keywords = array_unique($keywords);

                foreach ($keywords as $keyword) {
                    $tag = Tag::findOne(['name' => $keyword]);
                    if (!$tag) {
                        $newTag = new Tag();
                        $newTag->name = $keyword;
                        $newTag->save();
                    }
                }

                if (!$insert) {
                    PostTag::deleteAll(['post_id' => $this->id]);
                }

                $modelKeywords = Tag::findAll(['name' => $keywords]);

                foreach ($modelKeywords as $keyword) {
                    $postTag = new PostTag();
                    $postTag->post_id = $this->id;
                    $postTag->tag_id = $keyword->id;
                    $postTag->save();
                }
                $transaction->commit();
            } catch (\Throwable $e) {
                $transaction->rollBack();
            }
        }
    }

    public function isLiked()
    {
        return PostLike::find()->where(['post_id' => $this->id, 'user_id' => \Yii::$app->user->id])->count();
    }

    public function getDate()
    {
        return Yii::$app->formatter->asRelativeTime($this->updated_at);
    }

    public function getBlogTags()
    {
        return $this->hasMany(PostTag::class, ['post_id' => 'id']);
    }

    public function getTags()
    {
        return $this->hasMany(Tag::class, ['id' => 'tag_id'])->via('blogTags');
    }

    public function sendEmails()
    {
        $senders = Subscribe::find()->all();
        foreach ($senders as $sender) {
            try {
                Yii::$app->mailer->compose('post', ['model' => $this])
                    ->setFrom([Yii::$app->params['senderEmail'] => Yii::$app->params['senderName']])
                    ->setTo($sender->email)
                    ->setSubject($this->title)
                    ->send();
            } catch (\Swift_TransportException $e) {
                Yii::error($e);
            }
        }

    }

    public function changePublishStatus($newStatus)
    {
        $this->is_published = $newStatus;
        $this->save();
    }

    public function actionGeocode()
    {
        $key = urldecode('Ключ к API');
        $address = urldecode(Yii::$app->request->get('address') ?? Yii::$app->request->post('address'));
        if (isset($adress)) {
            $url = "https://geocode-maps.yandex.ru/1.x/?apikey={$key}&format=json&geocode={$address}";
            return $url;
        }
    }



}
